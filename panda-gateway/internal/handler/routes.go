// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	admin "Pandax/panda-gateway/internal/handler/admin"
	menu "Pandax/panda-gateway/internal/handler/menu"
	systemApi "Pandax/panda-gateway/internal/handler/systemApi"
	systemDepartment "Pandax/panda-gateway/internal/handler/systemDepartment"
	systemRole "Pandax/panda-gateway/internal/handler/systemRole"
	systemRoleApi "Pandax/panda-gateway/internal/handler/systemRoleApi"
	systemRoleMenu "Pandax/panda-gateway/internal/handler/systemRoleMenu"
	"Pandax/panda-gateway/internal/svc"

	"github.com/tal-tech/go-zero/rest"
)

func RegisterHandlers(engine *rest.Server, serverCtx *svc.ServiceContext) {
	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/admin/adminLogin",
				Handler: admin.AdminLoginHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/admin/changeAvatar",
				Handler: admin.ChangeAvatarHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/admin/logout",
				Handler: admin.AdminLogoutHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/admin/updateadminpassword",
				Handler: admin.UpdateadminpasswordHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/admin/info",
				Handler: admin.AdminInfoHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckLogin},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/admin/list",
					Handler: admin.AdminListHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/admin/delete",
					Handler: admin.AdminDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/admin/deleteBatch",
					Handler: admin.AdminDeleteBatchHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/admin/find",
					Handler: admin.AdminFindOneHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/admin/adminAdd",
					Handler: admin.AdminAddHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/admin/adminUpdate",
					Handler: admin.AdminUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckLogin},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/systemMenu/list",
					Handler: menu.MenuListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/systemMenu/treeList",
					Handler: menu.TreeListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/systemMenu/parentList",
					Handler: menu.MenuParentListHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/systemMenu/delete",
					Handler: menu.MenuDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/systemMenu/deleteBatch",
					Handler: menu.MenuDeleteBatchHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/systemMenu/find",
					Handler: menu.MenuFindOneHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/systemMenu/add",
					Handler: menu.MenuAddHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/systemMenu/update",
					Handler: menu.MenuUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckLogin},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/systemApi/list",
					Handler: systemApi.SystemApiListHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/systemApi/delete",
					Handler: systemApi.SystemApiDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/systemApi/deleteBatch",
					Handler: systemApi.SystemApiDeleteBatchHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/systemApi/find",
					Handler: systemApi.SystemApiFindOneHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/systemApi/add",
					Handler: systemApi.SystemApiAddHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/systemApi/update",
					Handler: systemApi.SystemApiUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckLogin},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/systemRole/list",
					Handler: systemRole.SystemRoleListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/systemRole/parentList",
					Handler: systemRole.MenuParentListHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/systemRole/delete",
					Handler: systemRole.SystemRoleDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/systemRole/deleteBatch",
					Handler: systemRole.SystemRoleDeleteBatchHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/systemRole/find",
					Handler: systemRole.SystemRoleFindOneHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/systemRole/add",
					Handler: systemRole.SystemRoleAddHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/systemRole/update",
					Handler: systemRole.SystemRoleUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckLogin},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/systemDepartment/list",
					Handler: systemDepartment.SystemDepartmentListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/systemDepartment/parentList",
					Handler: systemDepartment.SystemDepartmentParentListHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/systemDepartment/delete",
					Handler: systemDepartment.SystemDepartmentDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/systemDepartment/deleteBatch",
					Handler: systemDepartment.SystemDepartmentDeleteBatchHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/systemDepartment/find",
					Handler: systemDepartment.SystemDepartmentFindOneHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/systemDepartment/add",
					Handler: systemDepartment.SystemDepartmentAddHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/systemDepartment/update",
					Handler: systemDepartment.SystemDepartmentUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckLogin},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/systemRoleMenu/list",
					Handler: systemRoleMenu.SystemRoleMenuListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/systemRoleMenu/byRoleId",
					Handler: systemRoleMenu.SystemRoleMenusByRoleIdHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/systemRoleMenu/delete",
					Handler: systemRoleMenu.SystemRoleMenuDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/systemRoleMenu/deleteBatch",
					Handler: systemRoleMenu.SystemRoleMenuDeleteBatchHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/systemRoleMenu/find",
					Handler: systemRoleMenu.SystemRoleMenuFindOneHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/systemRoleMenu/add",
					Handler: systemRoleMenu.SystemRoleMenuAddHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/systemRoleMenu/update",
					Handler: systemRoleMenu.SystemRoleMenuUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckLogin},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/systemRoleApi/list",
					Handler: systemRoleApi.SystemRoleApiListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/systemRoleApi/byRoleId",
					Handler: systemRoleApi.SystemRoleApisByRoleIdHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/systemRoleApi/delete",
					Handler: systemRoleApi.SystemRoleApiDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/systemRoleApi/deleteBatch",
					Handler: systemRoleApi.SystemRoleApiDeleteBatchHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/systemRoleApi/find",
					Handler: systemRoleApi.SystemRoleApiFindOneHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/systemRoleApi/add",
					Handler: systemRoleApi.SystemRoleApiAddHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/systemRoleApi/update",
					Handler: systemRoleApi.SystemRoleApiUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)
}
